@page "/login"
@using UserAuthentication.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navigationManager
<h3>AdminPage</h3>
<h3>Login</h3>
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <i class="fa fa-user icon"></i>
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <i class="fa fa-envelope icon"></i>
                <label>Username</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <i class="fa fa-key icon"></i>
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new LoginViewModel();
    
    private string? errorMessage;
    User user = new User()
    {
        Password = "1234",
        UserName = "Admin",
         Role = "Admin"
     };
    private async Task Authenticate()
    {
        if (user.Password!=Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,Model.UserName),
            new  Claim(ClaimTypes.Role,user.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
